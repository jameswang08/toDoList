(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var i=n(537),r=n.n(i),o=n(645),a=n.n(o)()(r());a.push([t.id,"html, body, ul,\nh1, h2, h3{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    display: flex;\n    height: 100vh;\n}\n\n.ProjectContainer{\n    border-right: 1px solid black;\n}\n\n.tasks{\n    flex: 1 1 0;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 200px);\n    grid-auto-rows: 300px;\n}\n\n.task,\n.add{\n    border: 2px solid black;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    overflow: hidden;\n}\n\n.addProject{\n    display: flex;\n    flex-direction: column;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,WAAW;IACX,aAAa;IACb,+CAA+C;IAC/C,qBAAqB;AACzB;;AAEA;;IAEI,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B",sourcesContent:["html, body, ul,\nh1, h2, h3{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    display: flex;\n    height: 100vh;\n}\n\n.ProjectContainer{\n    border-right: 1px solid black;\n}\n\n.tasks{\n    flex: 1 1 0;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 200px);\n    grid-auto-rows: 300px;\n}\n\n.task,\n.add{\n    border: 2px solid black;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    overflow: hidden;\n}\n\n.addProject{\n    display: flex;\n    flex-direction: column;\n}"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(i)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);i&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},a=[],s=0;s<t.length;s++){var d=t[s],c=i.base?d[0]+i.base:d[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var p=n(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var h=r(m,i);i.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var d=i(t,r),c=0;c<o.length;c++){var l=n(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=d}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),a=n.n(o),s=n(565),d=n.n(s),c=n(216),l=n.n(c),u=n(589),p=n.n(u),m=n(426),h={};h.styleTagTransform=p(),h.setAttributes=d(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const f=class{constructor(t,e,n,i){this.name=t,this.priority=e,this.date=n,this.description=i,this.edit=!1}isEditing(){return!!this.edit}toggleEdit(){this.edit=!this.edit}update(t,e,n,i){this.name=t,this.priority=e,this.date=n,this.description=i}display(){const t=document.createElement("div");document.createElement("ion-icon").setAttribute("name","pencil");const e=document.createElement("h2");e.textContent=this.name,t.appendChild(e);const n=document.createElement("h3");n.textContent=`Priority: ${this.priority}`,t.appendChild(n);const i=document.createElement("h3");i.textContent=`Date: ${this.date}`,t.appendChild(i);const r=document.createElement("p");return r.textContent=`Description: ${this.description}`,t.appendChild(r),t.classList.add("task"),t}},y=class{constructor(t){this.name=t,this.taskList=[]}editSubmit(t,e,n){e.preventDefault();const i=document.getElementById("name").value,r=document.getElementById("priority").value,o=document.getElementById("date").value,a=document.getElementById("description").value;this.taskList[n].update(i,r,o,a),t.toggleEdit(),window.localStorage.setItem(`Project: ${this.name} Task: ${t.name}`,JSON.stringify(t))}createEditForm(t,e,n){let i=document.createElement("form");function r(t,e){let n=document.createElement(t);for(let t in e)"textContent"===t?n.textContent=e[t]:n.setAttribute(t,e[t]);return n}i.className="edit",[{label:"Task Name:",input:"name",type:"text",required:!0},{label:"Priority:",input:"priority",type:"select",options:["Low","Medium","High"]},{label:"Date:",input:"date",type:"datetime-local"},{label:"Description:",input:"description",type:"textarea",required:!0}].forEach((function(e){let n,o=r("label",{for:e.input,textContent:e.label});i.appendChild(o),"select"===e.type?(n=r("select",{name:e.input,id:e.input}),e.options.forEach((function(i){let o=r("option",{value:i.toLowerCase(),textContent:i});t[e.input]===i&&(o.selected=!0),n.appendChild(o)}))):"textarea"===e.type?(n=r("textarea",{id:e.input,name:e.input,required:e.required}),n.textContent=t[e.input]):n=r("input",{type:e.type,id:e.input,name:e.input,value:t[e.input]}),i.appendChild(n)}));let o=r("input",{type:"submit",value:"Submit",id:"submit"});i.appendChild(o),i.addEventListener("submit",(i=>{for(this.editSubmit(t,i,n);e.firstChild;)e.removeChild(e.firstChild);this.displayTasks()})),e.appendChild(i)}addButtons(t,e){const n=document.createElement("div"),i=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.setAttribute("viewBox","0 0 24 24"),i.innerHTML='\n          <title>trash-can-outline</title>\n          <path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" />\n        ',i.style.width="30px",i.style.height="auto",i.addEventListener("click",(()=>{t.remove();const n=this.taskList.indexOf(e);-1!==n&&(this.taskList.splice(n,1),window.localStorage.removeItem(`Project: ${this.name} Task: ${e.name}`)),this.displayTasks()}));const r=document.createElementNS("http://www.w3.org/2000/svg","svg");return r.setAttribute("xmlns","http://www.w3.org/2000/svg"),r.setAttribute("viewBox","0 0 24 24"),r.innerHTML='\n        <title>pencil</title><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" />',r.style.width="30px",r.style.height="auto",r.addEventListener("click",(()=>{for(;t.firstChild;)t.removeChild(t.firstChild);const n=this.taskList.indexOf(e);this.createEditForm(e,t,n)})),n.appendChild(i),n.appendChild(r),n}addTask(t){this.taskList.push(t),window.localStorage.setItem(`Project: ${this.name} Task: ${t.name}`,JSON.stringify(t))}displayTasks(){const t=document.querySelector(".tasks");t.querySelectorAll(".task").forEach((e=>{t.removeChild(e)})),this.taskList.forEach((e=>{let n=e.display(),i=this.addButtons(n,e);n.insertBefore(i,n.firstChild),t.insertBefore(n,t.firstChild)}))}},v=class{constructor(t){this.projList=[t],this.projInView=t,t.displayTasks(),window.localStorage.setItem(`${t.name}`,JSON.stringify(t))}getCurrentProjectInView(){return this.projInView}addProject(t){this.projList.push(t),window.localStorage.setItem(`${t.name}`,JSON.stringify(t))}displayProjects(){const t=document.querySelector(".projects");for(;t.firstChild;)t.removeChild(t.firstChild);const e=document.querySelector(".projects");this.projList.forEach((t=>{const n=document.createElement("li");n.innerText=t.name,n.addEventListener("click",(()=>{this.projInView=t,t.displayTasks()})),e.appendChild(n)}))}},A=/Project: (.+?) Task:/,g=document.querySelector(".add");g.addEventListener("submit",(t=>{t.preventDefault();const e=document.getElementById("name").value,n=document.getElementById("priority").value,i=document.getElementById("date").value,r=document.getElementById("description").value;let o=new f(e,n,i,r);w.getCurrentProjectInView().addTask(o),g.reset(),w.getCurrentProjectInView().displayTasks()}));const C=document.querySelector(".addProject");if(C.addEventListener("submit",(t=>{t.preventDefault();const e=document.getElementById("projName").value;w.addProject(new y(e)),w.displayProjects(),C.reset()})),0==window.localStorage.length){let t=new y("Example Project"),e=new f("Example Task","low","today","Lorem Ipsum");t.addTask(e);var w=new v(t)}else{const t=Object.keys(localStorage);t.sort((function(t,e){const n=t.match(A),i=e.match(A);return!n&&i?-1:n&&!i?1:0}));for(let e=0;e<t.length;e++){const n=t[e],i=n.match(A);let r=JSON.parse(window.localStorage.getItem(n));if(0!=e)if(i&&i[1]){let t=new f(r.name,r.priority,r.date,r.description);w.projList.find((t=>t.name==i[1])).addTask(t)}else{let t=new y(r.name,[]);w.addProject(t)}else w=new v(new y(r.name,[]))}}w.displayProjects(),w.getCurrentProjectInView().displayTasks()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,