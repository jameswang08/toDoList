(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var i=n(537),r=n.n(i),o=n(645),a=n.n(o)()(r());a.push([t.id,"html, body, ul,\nh1, h2, h3{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    display: flex;\n    height: 100vh;\n}\n\n.ProjectContainer{\n    border-right: 1px solid black;\n}\n\n.tasks{\n    flex: 1 1 0;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 200px);\n    grid-auto-rows: 300px;\n}\n\n.task,\n.add{\n    border: 2px solid black;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    overflow: hidden;\n}\n\n.addProject{\n    display: flex;\n    flex-direction: column;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;IAEI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,WAAW;IACX,aAAa;IACb,+CAA+C;IAC/C,qBAAqB;AACzB;;AAEA;;IAEI,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,2BAA2B;IAC3B,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B",sourcesContent:["html, body, ul,\nh1, h2, h3{\n    margin: 0;\n    padding: 0;\n}\n\n.container{\n    display: flex;\n    height: 100vh;\n}\n\n.ProjectContainer{\n    border-right: 1px solid black;\n}\n\n.tasks{\n    flex: 1 1 0;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 200px);\n    grid-auto-rows: 300px;\n}\n\n.task,\n.add{\n    border: 2px solid black;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    overflow: hidden;\n}\n\n.addProject{\n    display: flex;\n    flex-direction: column;\n}"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",i=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),i&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),i&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,i,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(i)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);i&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},a=[],s=0;s<t.length;s++){var d=t[s],c=i.base?d[0]+i.base:d[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var p=n(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var h=r(m,i);i.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var d=i(t,r),c=0;c<o.length;c++){var l=n(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=d}}},569:t=>{var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i="";n.supports&&(i+="@supports (".concat(n.supports,") {")),n.media&&(i+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(i+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),i+=n.css,r&&(i+="}"),n.media&&(i+="}"),n.supports&&(i+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),i=n(795),r=n.n(i),o=n(569),a=n.n(o),s=n(565),d=n.n(s),c=n(216),l=n.n(c),u=n(589),p=n.n(u),m=n(426),h={};h.styleTagTransform=p(),h.setAttributes=d(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const f=class{constructor(t,e,n,i){this.name=t,this.priority=e,this.date=n,this.description=i,this.edit=!1}isEditing(){return!!this.edit}toggleEdit(){this.edit=!this.edit}update(t,e,n,i){this.name=t,this.priority=e,this.date=n,this.description=i}display(){const t=document.createElement("div");document.createElement("ion-icon").setAttribute("name","pencil");const e=document.createElement("h2");e.textContent=this.name,t.appendChild(e);const n=document.createElement("h3");n.textContent=`Priority: ${this.priority}`,t.appendChild(n);const i=document.createElement("h3");i.textContent=`Date: ${this.date}`,t.appendChild(i);const r=document.createElement("p");return r.textContent=`Description: ${this.description}`,t.appendChild(r),t.classList.add("task"),t}},y=class{constructor(t){this.name=t,this.taskList=[]}addTask(t){this.taskList.push(t),window.localStorage.setItem(`Project: ${this.name} Task: ${t.name}`,JSON.stringify(t))}displayTasks(){const t=document.querySelector(".tasks");t.querySelectorAll(".task").forEach((e=>{t.removeChild(e)})),this.taskList.forEach((e=>{let n=e.display(),i=this.addButtons(n,e);n.insertBefore(i,n.firstChild),t.insertBefore(n,t.firstChild)}))}editSubmit(t,e,n){e.preventDefault();const i=document.getElementById("name").value,r=document.getElementById("priority").value,o=document.getElementById("date").value,a=document.getElementById("description").value;this.taskList[n].update(i,r,o,a),t.toggleEdit(),window.localStorage.setItem(`Project: ${this.name} Task: ${t.name}`,JSON.stringify(t))}createEditForm(t,e,n){let i=document.createElement("form");function r(t,e){let n=document.createElement(t);for(let t in e)"textContent"===t?n.textContent=e[t]:n.setAttribute(t,e[t]);return n}i.className="edit",[{label:"Task Name:",input:"name",type:"text",required:!0},{label:"Priority:",input:"priority",type:"select",options:["Low","Medium","High"]},{label:"Date:",input:"date",type:"datetime-local"},{label:"Description:",input:"description",type:"textarea",required:!0}].forEach((function(e){let n,o=r("label",{for:e.input,textContent:e.label});i.appendChild(o),"select"===e.type?(n=r("select",{name:e.input,id:e.input}),e.options.forEach((function(i){let o=r("option",{value:i.toLowerCase(),textContent:i});t[e.input]===i&&(o.selected=!0),n.appendChild(o)}))):"textarea"===e.type?(n=r("textarea",{id:e.input,name:e.input,required:e.required}),n.textContent=t[e.input]):n=r("input",{type:e.type,id:e.input,name:e.input,value:t[e.input]}),i.appendChild(n)}));let o=r("input",{type:"submit",value:"Submit",id:"submit"});i.appendChild(o),i.addEventListener("submit",(i=>{for(this.editSubmit(t,i,n);e.firstChild;)e.removeChild(e.firstChild);this.displayTasks()})),e.appendChild(i)}addButtons(t,e){const n=document.createElement("div"),i=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.setAttribute("viewBox","0 0 24 24"),i.innerHTML='\n          <title>trash-can-outline</title>\n          <path d="M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z" />\n        ',i.style.width="30px",i.style.height="auto",i.addEventListener("click",(()=>{t.remove();const n=this.taskList.indexOf(e);-1!==n&&(this.taskList.splice(n,1),window.localStorage.removeItem(`Project: ${this.name} Task: ${e.name}`)),this.displayTasks()}));const r=document.createElementNS("http://www.w3.org/2000/svg","svg");return r.setAttribute("xmlns","http://www.w3.org/2000/svg"),r.setAttribute("viewBox","0 0 24 24"),r.innerHTML='\n        <title>pencil</title><path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z" />',r.style.width="30px",r.style.height="auto",r.addEventListener("click",(()=>{for(;t.firstChild;)t.removeChild(t.firstChild);const n=this.taskList.indexOf(e);this.createEditForm(e,t,n)})),n.appendChild(i),n.appendChild(r),n}},v=class{constructor(t){this.projList=[t],this.projInView=t,t.displayTasks(),window.localStorage.setItem(`${t.name}`,JSON.stringify(t))}getCurrentProjectInView(){return this.projInView}addProject(t){this.projList.push(t),window.localStorage.setItem(`${t.name}`,JSON.stringify(t))}displayProjects(){const t=document.querySelector(".projects");for(;t.firstChild;)t.removeChild(t.firstChild);const e=document.querySelector(".projects");this.projList.forEach((t=>{const n=document.createElement("li");n.innerText=t.name,n.addEventListener("click",(()=>{this.projInView=t,t.displayTasks()})),e.appendChild(n)}))}},A=/Project: (.+?) Task:/,g=document.querySelector(".add");g.addEventListener("submit",(t=>{t.preventDefault();const e=document.getElementById("name").value,n=document.getElementById("priority").value,i=document.getElementById("date").value,r=document.getElementById("description").value;let o=new f(e,n,i,r);w.getCurrentProjectInView().addTask(o),g.reset(),w.getCurrentProjectInView().displayTasks()}));const C=document.querySelector(".addProject");if(C.addEventListener("submit",(t=>{t.preventDefault();const e=document.getElementById("projName").value;w.addProject(new y(e)),w.displayProjects(),C.reset()})),0==window.localStorage.length){let t=new y("Example Project"),e=new f("Example Task","low","today","Lorem Ipsum");t.addTask(e);var w=new v(t)}else{const t=Object.keys(localStorage);t.sort((function(t,e){const n=t.match(A),i=e.match(A);return!n&&i?-1:n&&!i?1:0}));for(let e=0;e<t.length;e++){const n=t[e],i=n.match(A);let r=JSON.parse(window.localStorage.getItem(n));if(0!=e)if(i&&i[1]){let t=new f(r.name,r.priority,r.date,r.description);w.projList.find((t=>t.name==i[1])).addTask(t)}else{let t=new y(r.name,[]);w.addProject(t)}else w=new v(new y(r.name,[]))}}w.displayProjects(),w.getCurrentProjectInView().displayTasks()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBb0I5RixFQUFHK0YsR0FDckIsTUFBTUMsRUFBU2hHLEVBQUVpRyxNQUFNWCxHQUNqQlksRUFBU0gsRUFBRUUsTUFBTVgsR0FFdkIsT0FBS1UsR0FBVUUsR0FBZ0IsRUFDdEJGLElBQVdFLEVBQWUsRUFDdkIsQ0FDZCxJQWlERSxJQUFJLElBQUk1TCxFQUFJLEVBQUdBLEVBQUl1TCxFQUFLekwsT0FBUUUsSUFBSSxDQUVsQyxNQUFNNEYsRUFBTTJGLEVBQUt2TCxHQUNYMkwsRUFBUS9GLEVBQUkrRixNQUFNWCxHQUV4QixJQUFJdEwsRUFBT3FCLEtBQUs4SyxNQUFNckksT0FBT3dFLGFBQWE4RCxRQUFRbEcsSUFHbEQsR0FBTSxHQUFINUYsRUFNSCxHQUFHMkwsR0FBU0EsRUFBTSxHQUFHLENBRW5CLElBQUlJLEVBQVUsSUFBSSxFQUFLck0sRUFBS21ILEtBQU1uSCxFQUFLb0gsU0FBVXBILEVBQUtpSCxLQUFNakgsRUFBS3FILGFBRWpFLEVBQVUwRCxTQUFTdUIsTUFBTUMsR0FBU0EsRUFBS3BGLE1BQVE4RSxFQUFNLEtBQUk3RCxRQUFRaUUsRUFDbkUsS0FFSSxDQUNGLElBQUk1RCxFQUFVLElBQUksRUFBUXpJLEVBQUttSCxLQUFNLElBQ3JDLEVBQVUrRCxXQUFXekMsRUFDdkIsTUFkTSxFQUFZLElBQUksRUFETixJQUFJLEVBQVF6SSxFQUFLbUgsS0FBTSxJQWdCekMsQ0FDRixDQUNBLEVBQVVnRSxrQkFDVixFQUFVRiwwQkFBMEJ6QyxjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG9saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL3Rhc2suanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL3NyYy9kYXNoYm9hcmQuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYGh0bWwsIGJvZHksIHVsLFxuaDEsIGgyLCBoM3tcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbn1cblxuLmNvbnRhaW5lcntcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGhlaWdodDogMTAwdmg7XG59XG5cbi5Qcm9qZWN0Q29udGFpbmVye1xuICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkIGJsYWNrO1xufVxuXG4udGFza3N7XG4gICAgZmxleDogMSAxIDA7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpbGwsIDIwMHB4KTtcbiAgICBncmlkLWF1dG8tcm93czogMzAwcHg7XG59XG5cbi50YXNrLFxuLmFkZHtcbiAgICBib3JkZXI6IDJweCBzb2xpZCBibGFjaztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi5hZGRQcm9qZWN0e1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7O0lBRUksU0FBUztJQUNULFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7SUFDYixhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksV0FBVztJQUNYLGFBQWE7SUFDYiwrQ0FBK0M7SUFDL0MscUJBQXFCO0FBQ3pCOztBQUVBOztJQUVJLHVCQUF1QjtJQUN2QixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLDJCQUEyQjtJQUMzQix1QkFBdUI7SUFDdkIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtBQUMxQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJodG1sLCBib2R5LCB1bCxcXG5oMSwgaDIsIGgze1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxufVxcblxcbi5jb250YWluZXJ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGhlaWdodDogMTAwdmg7XFxufVxcblxcbi5Qcm9qZWN0Q29udGFpbmVye1xcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCBibGFjaztcXG59XFxuXFxuLnRhc2tze1xcbiAgICBmbGV4OiAxIDEgMDtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maWxsLCAyMDBweCk7XFxuICAgIGdyaWQtYXV0by1yb3dzOiAzMDBweDtcXG59XFxuXFxuLnRhc2ssXFxuLmFkZHtcXG4gICAgYm9yZGVyOiAycHggc29saWQgYmxhY2s7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5hZGRQcm9qZWN0e1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY2xhc3MgVGFza3tcbiAgICBjb25zdHJ1Y3RvcihubSwgcHJpbywgZGF0ZSwgZGlzYyl7XG4gICAgICAgIHRoaXMubmFtZSA9IG5tO1xuICAgICAgICB0aGlzLnByaW9yaXR5ID0gcHJpbztcbiAgICAgICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRpc2M7XG4gICAgICAgIHRoaXMuZWRpdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpc0VkaXRpbmcoKXtcbiAgICAgICAgaWYodGhpcy5lZGl0KSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0b2dnbGVFZGl0KCl7XG4gICAgICAgIHRoaXMuZWRpdCA9ICF0aGlzLmVkaXQ7XG4gICAgfVxuICAgIHVwZGF0ZShubSwgcHJpbywgZGF0ZSwgZGlzYyl7XG4gICAgICAgIHRoaXMubmFtZSA9IG5tO1xuICAgICAgICB0aGlzLnByaW9yaXR5ID0gcHJpbztcbiAgICAgICAgdGhpcy5kYXRlID0gZGF0ZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRpc2M7XG4gICAgfVxuICAgIGRpc3BsYXkoKXtcbiAgICAgICAgY29uc3QgdGFzaz0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgY29uc3QgZWRpdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lvbi1pY29uJyk7XG4gICAgICAgIGVkaXQuc2V0QXR0cmlidXRlKCduYW1lJywgJ3BlbmNpbCcpO1xuXG4gICAgICAgIGNvbnN0IHRhc2tOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgICAgICAgdGFza05hbWUudGV4dENvbnRlbnQgPSB0aGlzLm5hbWU7XG4gICAgICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza05hbWUpO1xuXG4gICAgICAgIGNvbnN0IHRhc2tQcmlvcml0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgICAgIHRhc2tQcmlvcml0eS50ZXh0Q29udGVudCA9IGBQcmlvcml0eTogJHt0aGlzLnByaW9yaXR5fWA7XG4gICAgICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza1ByaW9yaXR5KTtcblxuICAgICAgICBjb25zdCB0YXNrRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gICAgICAgIHRhc2tEYXRlLnRleHRDb250ZW50ID0gYERhdGU6ICR7dGhpcy5kYXRlfWA7XG4gICAgICAgIHRhc2suYXBwZW5kQ2hpbGQodGFza0RhdGUpO1xuXG4gICAgICAgIGNvbnN0IHRhc2tEZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgdGFza0Rlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gYERlc2NyaXB0aW9uOiAke3RoaXMuZGVzY3JpcHRpb259YDtcbiAgICAgICAgdGFzay5hcHBlbmRDaGlsZCh0YXNrRGVzY3JpcHRpb24pO1xuXG4gICAgICAgIHRhc2suY2xhc3NMaXN0LmFkZCgndGFzaycpO1xuXG4gICAgICAgIHJldHVybiB0YXNrO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFzazsiLCJjbGFzcyBQcm9qZWN0e1xuICAgIGNvbnN0cnVjdG9yKHByb2pOYW1lKXtcbiAgICAgICAgdGhpcy5uYW1lPXByb2pOYW1lO1xuICAgICAgICB0aGlzLnRhc2tMaXN0ID0gW107XG4gICAgfVxuICAgIGFkZFRhc2sodGFza09iail7XG4gICAgICAgIHRoaXMudGFza0xpc3QucHVzaCh0YXNrT2JqKTtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGBQcm9qZWN0OiAke3RoaXMubmFtZX0gVGFzazogJHt0YXNrT2JqLm5hbWV9YCwgSlNPTi5zdHJpbmdpZnkodGFza09iaikpO1xuICAgIH1cbiAgICBkaXNwbGF5VGFza3MoKXtcbiAgICAgICAgY29uc3QgbmV3UHJvaiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50YXNrcycpO1xuXG4gICAgICAgIGNvbnN0IHRhc2tFbGVtZW50cyA9IG5ld1Byb2oucXVlcnlTZWxlY3RvckFsbCgnLnRhc2snKTtcbiAgICAgICAgdGFza0VsZW1lbnRzLmZvckVhY2godGFza0VsZW1lbnQgPT4ge1xuICAgICAgICAgICAgbmV3UHJvai5yZW1vdmVDaGlsZCh0YXNrRWxlbWVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudGFza0xpc3QuZm9yRWFjaCggaXRlbSA9PiB7XG4gICAgICAgICAgICBsZXQgYVRhc2sgPSBpdGVtLmRpc3BsYXkoKVxuICAgICAgICAgICAgbGV0IGJ1dHRvbnMgPSB0aGlzLmFkZEJ1dHRvbnMoYVRhc2ssIGl0ZW0pO1xuICAgICAgICAgICAgYVRhc2suaW5zZXJ0QmVmb3JlKGJ1dHRvbnMsIGFUYXNrLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgbmV3UHJvai5pbnNlcnRCZWZvcmUoYVRhc2ssIG5ld1Byb2ouZmlyc3RDaGlsZCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlZGl0U3VibWl0KGl0ZW0sIGV2ZW50LCBpbmRleCl7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgY29uc3QgdGFza05hbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmFtZScpLnZhbHVlO1xuICAgICAgICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmlvcml0eScpLnZhbHVlO1xuICAgICAgICBjb25zdCBkYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhdGUnKS52YWx1ZTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVzY3JpcHRpb24nKS52YWx1ZTtcbiAgICAgICAgdGhpcy50YXNrTGlzdFtpbmRleF0udXBkYXRlKHRhc2tOYW1lLCBwcmlvcml0eSwgZGF0ZSwgZGVzY3JpcHRpb24pO1xuXG4gICAgICAgIGl0ZW0udG9nZ2xlRWRpdCgpO1xuXG4gICAgICAgIC8vVXBkYXRlIHRhc2sgaW4gbG9jYWwgc3RvcmFnZVxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oYFByb2plY3Q6ICR7dGhpcy5uYW1lfSBUYXNrOiAke2l0ZW0ubmFtZX1gLCBKU09OLnN0cmluZ2lmeShpdGVtKSk7XG4gICAgfVxuICAgIGNyZWF0ZUVkaXRGb3JtKHRhc2ssIHRhc2tFbGVtZW50LCBpbmRleCl7XG4gICAgICAgIC8vIENyZWF0ZSBmb3JtIGVsZW1lbnRcbiAgICAgICAgbGV0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgICAgICAgZm9ybS5jbGFzc05hbWUgPSBcImVkaXRcIjtcblxuICAgICAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIGFuZCBhcHBlbmQgZm9ybSBlbGVtZW50c1xuICAgICAgICBmdW5jdGlvbiBjcmVhdGVGb3JtRWxlbWVudCh0YWcsIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSBcInRleHRDb250ZW50XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIC8vIExhYmVscyBhbmQgaW5wdXQgdmFsdWVzIGJhc2VkIG9uIHRhc2sgb2JqZWN0XG4gICAgICAgIGxldCBsYWJlbHNBbmRJbnB1dHMgPSBbXG4gICAgICAgICAgICB7IGxhYmVsOiBcIlRhc2sgTmFtZTpcIiwgaW5wdXQ6IFwibmFtZVwiLCB0eXBlOiBcInRleHRcIiwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICAgICAgICAgIHsgbGFiZWw6IFwiUHJpb3JpdHk6XCIsIGlucHV0OiBcInByaW9yaXR5XCIsIHR5cGU6IFwic2VsZWN0XCIsIG9wdGlvbnM6IFtcIkxvd1wiLCBcIk1lZGl1bVwiLCBcIkhpZ2hcIl0gfSxcbiAgICAgICAgICAgIHsgbGFiZWw6IFwiRGF0ZTpcIiwgaW5wdXQ6IFwiZGF0ZVwiLCB0eXBlOiBcImRhdGV0aW1lLWxvY2FsXCIgfSxcbiAgICAgICAgICAgIHsgbGFiZWw6IFwiRGVzY3JpcHRpb246XCIsIGlucHV0OiBcImRlc2NyaXB0aW9uXCIsIHR5cGU6IFwidGV4dGFyZWFcIiwgcmVxdWlyZWQ6IHRydWUgfVxuICAgICAgICBdO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBsYWJlbHMgYW5kIGlucHV0cyBhcnJheSBhbmQgY3JlYXRlIGZvcm0gZWxlbWVudHNcbiAgICAgICAgbGFiZWxzQW5kSW5wdXRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgbGV0IGxhYmVsID0gY3JlYXRlRm9ybUVsZW1lbnQoXCJsYWJlbFwiLCB7IGZvcjogaXRlbS5pbnB1dCwgdGV4dENvbnRlbnQ6IGl0ZW0ubGFiZWwgfSk7XG4gICAgICAgICAgICBmb3JtLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgICAgICAgICAgbGV0IGlucHV0O1xuICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gY3JlYXRlRm9ybUVsZW1lbnQoXCJzZWxlY3RcIiwgeyBuYW1lOiBpdGVtLmlucHV0LCBpZDogaXRlbS5pbnB1dCB9KTtcbiAgICAgICAgICAgICAgICBpdGVtLm9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9wdGlvbkVsZW1lbnQgPSBjcmVhdGVGb3JtRWxlbWVudChcIm9wdGlvblwiLCB7IHZhbHVlOiBvcHRpb24udG9Mb3dlckNhc2UoKSwgdGV4dENvbnRlbnQ6IG9wdGlvbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhc2tbaXRlbS5pbnB1dF0gPT09IG9wdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuYXBwZW5kQ2hpbGQob3B0aW9uRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gXCJ0ZXh0YXJlYVwiKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBjcmVhdGVGb3JtRWxlbWVudChcInRleHRhcmVhXCIsIHsgaWQ6IGl0ZW0uaW5wdXQsIG5hbWU6IGl0ZW0uaW5wdXQsIHJlcXVpcmVkOiBpdGVtLnJlcXVpcmVkIH0pO1xuICAgICAgICAgICAgICAgIGlucHV0LnRleHRDb250ZW50ID0gdGFza1tpdGVtLmlucHV0XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBjcmVhdGVGb3JtRWxlbWVudChcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBpZDogaXRlbS5pbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbS5pbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRhc2tbaXRlbS5pbnB1dF0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIGFuZCBhcHBlbmQgaW5wdXQgZm9yIFN1Ym1pdCBidXR0b25cbiAgICAgICAgbGV0IHN1Ym1pdElucHV0ID0gY3JlYXRlRm9ybUVsZW1lbnQoXCJpbnB1dFwiLCB7IHR5cGU6IFwic3VibWl0XCIsIHZhbHVlOiBcIlN1Ym1pdFwiLCBpZDogXCJzdWJtaXRcIiB9KTtcblxuICAgICAgICBmb3JtLmFwcGVuZENoaWxkKHN1Ym1pdElucHV0KTtcblxuICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5lZGl0U3VibWl0KHRhc2ssIGV2ZW50LCBpbmRleCk7XG4gICAgICAgICAgICAvL0NsZWFyIGZvcm1cbiAgICAgICAgICAgIHdoaWxlKHRhc2tFbGVtZW50LmZpcnN0Q2hpbGQpIHRhc2tFbGVtZW50LnJlbW92ZUNoaWxkKHRhc2tFbGVtZW50LmZpcnN0Q2hpbGQpO1xuXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlUYXNrcygpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBcHBlbmQgdGhlIGZvcm0gdG8gdGhlIGRvY3VtZW50IGJvZHlcbiAgICAgICAgdGFza0VsZW1lbnQuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgfVxuICAgIGFkZEJ1dHRvbnModGFzaywgdGFza0VsZW1lbnQpe1xuICAgICAgICBjb25zdCBjb250ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgICAgLy9EZWxldGUgYnV0dG9uXG4gICAgICAgIGNvbnN0IGRlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwic3ZnXCIpO1xuICAgICAgICBkZWwuc2V0QXR0cmlidXRlKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgICAgZGVsLnNldEF0dHJpYnV0ZShcInZpZXdCb3hcIiwgXCIwIDAgMjQgMjRcIik7XG4gICAgICAgIGRlbC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgPHRpdGxlPnRyYXNoLWNhbi1vdXRsaW5lPC90aXRsZT5cbiAgICAgICAgICA8cGF0aCBkPVwiTTksM1Y0SDRWNkg1VjE5QTIsMiAwIDAsMCA3LDIxSDE3QTIsMiAwIDAsMCAxOSwxOVY2SDIwVjRIMTVWM0g5TTcsNkgxN1YxOUg3VjZNOSw4VjE3SDExVjhIOU0xMyw4VjE3SDE1VjhIMTNaXCIgLz5cbiAgICAgICAgYDtcbiAgICAgICAgZGVsLnN0eWxlLndpZHRoID0nMzBweCc7XG4gICAgICAgIGRlbC5zdHlsZS5oZWlnaHQ9J2F1dG8nO1xuICAgICAgICBkZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0YXNrLnJlbW92ZSgpXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMudGFza0xpc3QuaW5kZXhPZih0YXNrRWxlbWVudCk7XG4gICAgICAgICAgICBpZihpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhc2tMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGBQcm9qZWN0OiAke3RoaXMubmFtZX0gVGFzazogJHt0YXNrRWxlbWVudC5uYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9SZWZyZXNoIHRhc2sgcGFnZVxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5VGFza3MoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9FZGl0IGJ1dHRvblxuICAgICAgICBjb25zdCBlZGl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJzdmdcIik7XG4gICAgICAgIGVkaXQuc2V0QXR0cmlidXRlKFwieG1sbnNcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiKTtcbiAgICAgICAgZWRpdC5zZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIsIFwiMCAwIDI0IDI0XCIpO1xuICAgICAgICBlZGl0LmlubmVySFRNTCA9IGBcbiAgICAgICAgPHRpdGxlPnBlbmNpbDwvdGl0bGU+PHBhdGggZD1cIk0yMC43MSw3LjA0QzIxLjEsNi42NSAyMS4xLDYgMjAuNzEsNS42M0wxOC4zNywzLjI5QzE4LDIuOSAxNy4zNSwyLjkgMTYuOTYsMy4yOUwxNS4xMiw1LjEyTDE4Ljg3LDguODdNMywxNy4yNVYyMUg2Ljc1TDE3LjgxLDkuOTNMMTQuMDYsNi4xOEwzLDE3LjI1WlwiIC8+YDtcbiAgICAgICAgZWRpdC5zdHlsZS53aWR0aCA9JzMwcHgnO1xuICAgICAgICBlZGl0LnN0eWxlLmhlaWdodD0nYXV0byc7XG4gICAgICAgIGVkaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICAvL0NsZWFyIGN1cnJlbnQgdGFzayBjb250ZW50c1xuICAgICAgICAgICAgd2hpbGUodGFzay5maXJzdENoaWxkKSB0YXNrLnJlbW92ZUNoaWxkKHRhc2suZmlyc3RDaGlsZCk7XG5cbiAgICAgICAgICAgIC8vUmVwbGFjZSB3aXRoIGZvcm1cbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy50YXNrTGlzdC5pbmRleE9mKHRhc2tFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRWRpdEZvcm0odGFza0VsZW1lbnQsIHRhc2ssIGluZGV4KTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgICBjb250LmFwcGVuZENoaWxkKGRlbCk7XG4gICAgICAgIGNvbnQuYXBwZW5kQ2hpbGQoZWRpdCk7XG4gICAgICAgIHJldHVybiBjb250O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdCIsImNsYXNzIERhc2hib2FyZHtcbiAgICBjb25zdHJ1Y3RvcihhUHJvamVjdCl7XG4gICAgICAgIHRoaXMucHJvakxpc3QgPSBbYVByb2plY3RdO1xuICAgICAgICB0aGlzLnByb2pJblZpZXcgPSBhUHJvamVjdDtcbiAgICAgICAgYVByb2plY3QuZGlzcGxheVRhc2tzKCk7XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHthUHJvamVjdC5uYW1lfWAsIEpTT04uc3RyaW5naWZ5KGFQcm9qZWN0KSk7XG4gICAgfVxuICAgIGdldEN1cnJlbnRQcm9qZWN0SW5WaWV3KCl7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2pJblZpZXc7XG4gICAgfVxuICAgIGFkZFByb2plY3Qob2JqKXtcbiAgICAgICAgdGhpcy5wcm9qTGlzdC5wdXNoKG9iaik7XG4gICAgICAgIFxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7b2JqLm5hbWV9YCwgSlNPTi5zdHJpbmdpZnkob2JqKSk7XG4gICAgfVxuICAgIGRpc3BsYXlQcm9qZWN0cygpe1xuICAgICAgICAvL0NsZWFyIGN1cnJlbnQgcHJvamVjdHNcbiAgICAgICAgY29uc3QgY29udCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0cycpO1xuICAgICAgICB3aGlsZShjb250LmZpcnN0Q2hpbGQpIGNvbnQucmVtb3ZlQ2hpbGQoY29udC5maXJzdENoaWxkKTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3RzJyk7XG4gICAgICAgIHRoaXMucHJvakxpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3UHJvaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICAgICAgICBuZXdQcm9qLmlubmVyVGV4dCA9IGl0ZW0ubmFtZTtcblxuICAgICAgICAgICAgbmV3UHJvai5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb2pJblZpZXcgPSBpdGVtO1xuICAgICAgICAgICAgICAgIGl0ZW0uZGlzcGxheVRhc2tzKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcHJvamVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdQcm9qKTtcbiAgICAgICAgfSk7XG5cblxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGFzaGJvYXJkOyIsImltcG9ydCAnLi9zdHlsZS5jc3MnO1xuaW1wb3J0IFRhc2sgZnJvbSAnLi90YXNrLmpzJ1xuaW1wb3J0IFByb2plY3QgZnJvbSAnLi9wcm9qZWN0LmpzJ1xuaW1wb3J0IERhc2ggZnJvbSAnLi9kYXNoYm9hcmQuanMnXG5cbi8vQ3VzdG9tIFNvcnQgSGVscGVyIEZ1bmN0aW9uXG5jb25zdCByZWdleCA9IC9Qcm9qZWN0OiAoLis/KSBUYXNrOi87XG5cbi8vIEN1c3RvbSBzb3J0aW5nIGZ1bmN0aW9uXG5mdW5jdGlvbiBjdXN0b21Tb3J0KGEsIGIpIHtcbiAgY29uc3QgbWF0Y2hBID0gYS5tYXRjaChyZWdleCk7XG4gIGNvbnN0IG1hdGNoQiA9IGIubWF0Y2gocmVnZXgpO1xuXG4gIGlmICghbWF0Y2hBICYmIG1hdGNoQikgcmV0dXJuIC0xO1xuICBlbHNlIGlmIChtYXRjaEEgJiYgIW1hdGNoQikgcmV0dXJuIDE7XG4gIGVsc2UgcmV0dXJuIDA7XG59XG5cbi8vTmV3IFRhc2tcbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkJyk7XG5cbmZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHRhc2tOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hbWUnKS52YWx1ZTtcbiAgICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmlvcml0eScpLnZhbHVlO1xuICAgIGNvbnN0IGRhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0ZScpLnZhbHVlO1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2NyaXB0aW9uJykudmFsdWU7XG5cbiAgICBsZXQgbXlUYXNrID0gbmV3IFRhc2sodGFza05hbWUsIHByaW9yaXR5LCBkYXRlLCBkZXNjcmlwdGlvbik7XG4gICAgZGFzaGJvYXJkLmdldEN1cnJlbnRQcm9qZWN0SW5WaWV3KCkuYWRkVGFzayhteVRhc2spO1xuICAgIGZvcm0ucmVzZXQoKTtcbiAgICBkYXNoYm9hcmQuZ2V0Q3VycmVudFByb2plY3RJblZpZXcoKS5kaXNwbGF5VGFza3MoKTtcbn0pO1xuXG4vL05ldyBQcm9qZWN0XG5jb25zdCBuZXdQcm9qZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZFByb2plY3QnKTtcblxubmV3UHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICBjb25zdCBuZXdQcm9qZWN0TmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qTmFtZScpLnZhbHVlO1xuICBkYXNoYm9hcmQuYWRkUHJvamVjdChuZXcgUHJvamVjdChuZXdQcm9qZWN0TmFtZSkpO1xuXG4gIGRhc2hib2FyZC5kaXNwbGF5UHJvamVjdHMoKTtcblxuICBuZXdQcm9qZWN0LnJlc2V0KCk7XG59KTtcblxuLy9DT0RFIFRIQVQgSVMgUlVOIFdIRU4gVVNFUiBBQ0NFU1NFUyBTSVRFXG5cbi8vSWYgdXNlciBoYXMgdmlzaXRlZCBzaXRlIGFscmVhZHkgYmVmb3JlLCBsb2FkIHByZXZpb3VzIHByb2plY3RzIGFuZCB0YXNrc1xuaWYod2luZG93LmxvY2FsU3RvcmFnZS5sZW5ndGg9PTApe1xuICBsZXQgbXlQcm9qID0gbmV3IFByb2plY3QoXCJFeGFtcGxlIFByb2plY3RcIik7XG4gIGxldCBzb21lVGFzayA9IG5ldyBUYXNrKFwiRXhhbXBsZSBUYXNrXCIsIFwibG93XCIsIFwidG9kYXlcIiwgXCJMb3JlbSBJcHN1bVwiKTtcbiAgbXlQcm9qLmFkZFRhc2soc29tZVRhc2spO1xuXG4gIC8vVmFyIHNvIHRoYXQgZGFzaGJvYXJkIHBlcnNpc3RzIG91dHNpZGUgb2YgdGhpcyBsb29wXG4gIHZhciBkYXNoYm9hcmQgPSBuZXcgRGFzaChteVByb2opO1xufVxuLy9PdGhlcndpc2UgY3JlYXRlIGFuIGV4YW1wZWxlIHByb2plY3QgYW5kIHRhc2tcbmVsc2V7XG4gIC8vU29ydCBsb2NhbCBkYXRhIHNvIHRoYXQgcHJvamVjdHMgYWx3YXlzIGNvbWUgYmVmb3JlIHRhc2tzXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhsb2NhbFN0b3JhZ2UpO1xuICBrZXlzLnNvcnQoY3VzdG9tU29ydCk7XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcblxuICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgY29uc3QgbWF0Y2ggPSBrZXkubWF0Y2gocmVnZXgpO1xuXG4gICAgbGV0IGl0ZW0gPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKTtcblxuICAgIC8vRmlyc3Qga2V5IGluIHN0b3JhZ2Ugd2lsbCBhbHdheXMgYmUgYSBwcm9qZWN0XG4gICAgaWYoaT09MCl7XG4gICAgICBsZXQgbmV3UHJvaiA9IG5ldyBQcm9qZWN0KGl0ZW0ubmFtZSwgW10pO1xuICAgICAgdmFyIGRhc2hib2FyZCA9IG5ldyBEYXNoKG5ld1Byb2opO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIC8vSWYgdGhlIGtleSBpbiBzdG9yYWdlIGNvbnRhaW5zIGEgdGFza1xuICAgIGlmKG1hdGNoICYmIG1hdGNoWzFdKXtcbiAgICAgIC8vQ3JlYXRlIG5ldyB0YXNrIG9iamVjdCBzbyB0aGF0IGl0IHJldGFpbnMgaXRzIG1ldGhvZHNcbiAgICAgIGxldCBuZXdUYXNrID0gbmV3IFRhc2soaXRlbS5uYW1lLCBpdGVtLnByaW9yaXR5LCBpdGVtLmRhdGUsIGl0ZW0uZGVzY3JpcHRpb24pO1xuICAgICAgLy9GaW5kIHByb2plY3QgaW4gRGFzaGJvYXJkIGFuZCBhZGQgdGFzayB0byBpdFxuICAgICAgZGFzaGJvYXJkLnByb2pMaXN0LmZpbmQoKHByb2opID0+IHByb2oubmFtZSA9PSBtYXRjaFsxXSkuYWRkVGFzayhuZXdUYXNrKTtcbiAgICB9XG4gICAgLy9PdGhlcndpc2UgaWYgdGhlIGtleSBjb250YWlucyBhIHByb2plY3RcbiAgICBlbHNle1xuICAgICAgbGV0IG5ld1Byb2ogPSBuZXcgUHJvamVjdChpdGVtLm5hbWUsIFtdKTtcbiAgICAgIGRhc2hib2FyZC5hZGRQcm9qZWN0KG5ld1Byb2opO1xuICAgIH1cbiAgfVxufVxuZGFzaGJvYXJkLmRpc3BsYXlQcm9qZWN0cygpO1xuZGFzaGJvYXJkLmdldEN1cnJlbnRQcm9qZWN0SW5WaWV3KCkuZGlzcGxheVRhc2tzKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImxvY2FscyIsImNvbnN0cnVjdG9yIiwibm0iLCJwcmlvIiwiZGF0ZSIsImRpc2MiLCJuYW1lIiwicHJpb3JpdHkiLCJkZXNjcmlwdGlvbiIsImVkaXQiLCJpc0VkaXRpbmciLCJ0b2dnbGVFZGl0IiwiZGlzcGxheSIsInRhc2siLCJ0YXNrTmFtZSIsInRleHRDb250ZW50IiwidGFza1ByaW9yaXR5IiwidGFza0RhdGUiLCJ0YXNrRGVzY3JpcHRpb24iLCJjbGFzc0xpc3QiLCJhZGQiLCJwcm9qTmFtZSIsInRhc2tMaXN0IiwiYWRkVGFzayIsInRhc2tPYmoiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiZGlzcGxheVRhc2tzIiwibmV3UHJvaiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwidGFza0VsZW1lbnQiLCJhVGFzayIsImJ1dHRvbnMiLCJhZGRCdXR0b25zIiwiaW5zZXJ0QmVmb3JlIiwiZWRpdFN1Ym1pdCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJnZXRFbGVtZW50QnlJZCIsInZhbHVlIiwiY3JlYXRlRWRpdEZvcm0iLCJmb3JtIiwiY3JlYXRlRm9ybUVsZW1lbnQiLCJ0YWciLCJjbGFzc05hbWUiLCJsYWJlbCIsImlucHV0IiwidHlwZSIsInJlcXVpcmVkIiwiZm9yIiwib3B0aW9uIiwib3B0aW9uRWxlbWVudCIsInRvTG93ZXJDYXNlIiwic2VsZWN0ZWQiLCJzdWJtaXRJbnB1dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb250IiwiZGVsIiwiY3JlYXRlRWxlbWVudE5TIiwiaW5uZXJIVE1MIiwid2lkdGgiLCJoZWlnaHQiLCJpbmRleE9mIiwicmVtb3ZlSXRlbSIsImFQcm9qZWN0IiwicHJvakxpc3QiLCJwcm9qSW5WaWV3IiwiZ2V0Q3VycmVudFByb2plY3RJblZpZXciLCJhZGRQcm9qZWN0IiwiZGlzcGxheVByb2plY3RzIiwicHJvamVjdENvbnRhaW5lciIsImlubmVyVGV4dCIsInJlZ2V4IiwibXlUYXNrIiwicmVzZXQiLCJuZXdQcm9qZWN0IiwibmV3UHJvamVjdE5hbWUiLCJteVByb2oiLCJzb21lVGFzayIsImtleXMiLCJzb3J0IiwiYiIsIm1hdGNoQSIsIm1hdGNoIiwibWF0Y2hCIiwicGFyc2UiLCJnZXRJdGVtIiwibmV3VGFzayIsImZpbmQiLCJwcm9qIl0sInNvdXJjZVJvb3QiOiIifQ==